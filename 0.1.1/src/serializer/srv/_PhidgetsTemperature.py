"""autogenerated by genmsg_py from PhidgetsTemperatureRequest.msg. Do not edit."""
import roslib.message
import struct


class PhidgetsTemperatureRequest(roslib.message.Message):
  _md5sum = "53bed398bc7ef4510938f1f4d6a12a22"
  _type = "serializer/PhidgetsTemperatureRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 pin
bool cached

"""
  __slots__ = ['pin','cached']
  _slot_types = ['uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       pin,cached
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PhidgetsTemperatureRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pin is None:
        self.pin = 0
      if self.cached is None:
        self.cached = False
    else:
      self.pin = 0
      self.cached = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.pin, _x.cached))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.pin, _x.cached,) = _struct_2B.unpack(str[start:end])
      self.cached = bool(self.cached)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.pin, _x.cached))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.pin, _x.cached,) = _struct_2B.unpack(str[start:end])
      self.cached = bool(self.cached)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2B = struct.Struct("<2B")
"""autogenerated by genmsg_py from PhidgetsTemperatureResponse.msg. Do not edit."""
import roslib.message
import struct


class PhidgetsTemperatureResponse(roslib.message.Message):
  _md5sum = "0aca93dcf6d857f0e5a0dc6be1eaa9fb"
  _type = "serializer/PhidgetsTemperatureResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 value


"""
  __slots__ = ['value']
  _slot_types = ['float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       value
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(PhidgetsTemperatureResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.value is None:
        self.value = 0.
    else:
      self.value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_f.pack(self.value))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (self.value,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_f.pack(self.value))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.value,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f = struct.Struct("<f")
class PhidgetsTemperature(roslib.message.ServiceDefinition):
  _type          = 'serializer/PhidgetsTemperature'
  _md5sum = '26f449bbbb387f925bde7742048c88a5'
  _request_class  = PhidgetsTemperatureRequest
  _response_class = PhidgetsTemperatureResponse
