<launch>
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find turtlebot_description)/urdf/turtlebot.urdf.xacro'" />

  <rosparam>
robot:
  name: robot1
  type: turtlebot
  </rosparam>

  <!--
  <node pkg="app_manager" type="app_manager" name="app_manager">
    <param name="interface_master" value="http://localhost:11312" />
  </node>
  -->

  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" >
    <!-- Load the file you made above -->
    <rosparam command="load" file="$(find turtlebot_bringup)/config/diagnostics.yaml" />
  </node>
  
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="30.0" />
    <!--param name="tf_prefix" type="string" value="" /-->
  </node>
  
  <!-- The imu node -->
  <include file="$(find pi_turtlebot)/launch/imu.launch" />

  <!-- The odometry estimator -->
   <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <param name="freq" value="10.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="publish_tf" value="true"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <remap from="imu_data" to="imu/data"/>
  </node>

  <!-- Turtlebot Laptop Battery Diagnostics -->
  <node pkg="turtlebot_node" type="laptop_battery.py" name="turtlebot_laptop_battery">
  </node> 


  <!-- Turtlebot Driver -->
  <node pkg="turtlebot_node" type="turtlebot_node.py" name="turtlebot_node" output="screen">
    <param name="port" value="/dev/create" />
    <param name="bonus" value="false" />
    <param name="stop_motors_on_bump" value="true" />
    <param name="min_abs_yaw_vel" value="0.75" />
    <param name="has_gyro" value="False" />
    <param name="gyro_scale_correction" value="1.057027" />
    <param name="odom_angular_scale_correction" value="0.878709" />
  </node> 

  <!-- Kinect -->
  <node pkg="nodelet" type="nodelet" name="openni_manager" output="screen" respawn="true" args="manager"/>

  <node pkg="nodelet" type="nodelet" name="openni_camera" args="load openni_camera/OpenNINodelet openni_manager" respawn="true">
    <param name="rgb_frame_id" value="kinect_rgb_optical_frame" />
    <param name="depth_frame_id" value="kinect_depth_optical_frame" />
    <param name="depth_registration" value="true" />
    <param name="image_mode" value="5" />
    <param name="depth_mode" value="5" />
    <param name="debayering" value="2" />
    <param name="depth_time_offset" value="0" />
    <param name="image_time_offset" value="0" />

    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
  </node>

  <!-- Enable breaker 1 for the kinect -->
  <node pkg="turtlebot_node" type="kinect_breaker_enabler.py" name="kinect_breaker_enabler"/>

  <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager" respawn="true">
    <param name="max_rate" value="20.0"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node>

  <!-- Fake Laser -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/kinect_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.15"/>
    <param name="max_height" value="0.15"/>
    <remap from="cloud" to="/cloud_throttled"/>
  </node>

  <!-- Fake Laser (narrow one, for localization -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser_narrow" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/kinect_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.025"/>
    <param name="max_height" value="0.025"/>
    <remap from="cloud" to="/cloud_throttled"/>
    <remap from="scan" to="/narrow_scan"/>
  </node>

</launch>
