/* Auto-generated by genmsg_cpp for file /home/patrick/Eclipse/ros/pi-robot-ros-stack/serializer/srv/Rotate.srv */
#ifndef SERIALIZER_SERVICE_ROTATE_H
#define SERIALIZER_SERVICE_ROTATE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"




namespace serializer
{
template <class ContainerAllocator>
struct RotateRequest_ : public ros::Message
{
  typedef RotateRequest_<ContainerAllocator> Type;

  RotateRequest_()
  : angle(0.0)
  , velocity(0.0)
  {
  }

  RotateRequest_(const ContainerAllocator& _alloc)
  : angle(0.0)
  , velocity(0.0)
  {
  }

  typedef double _angle_type;
  double angle;

  typedef double _velocity_type;
  double velocity;


private:
  static const char* __s_getDataType_() { return "serializer/RotateRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "add030c9a3ec13fc469e071a948d4d33"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "add030c9a3ec13fc469e071a948d4d33"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float64 angle\n\
float64 velocity\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, angle);
    ros::serialization::serialize(stream, velocity);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, angle);
    ros::serialization::deserialize(stream, velocity);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(angle);
    size += ros::serialization::serializationLength(velocity);
    return size;
  }

  typedef boost::shared_ptr< ::serializer::RotateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serializer::RotateRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct RotateRequest
typedef  ::serializer::RotateRequest_<std::allocator<void> > RotateRequest;

typedef boost::shared_ptr< ::serializer::RotateRequest> RotateRequestPtr;
typedef boost::shared_ptr< ::serializer::RotateRequest const> RotateRequestConstPtr;


template <class ContainerAllocator>
struct RotateResponse_ : public ros::Message
{
  typedef RotateResponse_<ContainerAllocator> Type;

  RotateResponse_()
  {
  }

  RotateResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "serializer/RotateResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "add030c9a3ec13fc469e071a948d4d33"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::serializer::RotateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serializer::RotateResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct RotateResponse
typedef  ::serializer::RotateResponse_<std::allocator<void> > RotateResponse;

typedef boost::shared_ptr< ::serializer::RotateResponse> RotateResponsePtr;
typedef boost::shared_ptr< ::serializer::RotateResponse const> RotateResponseConstPtr;

struct Rotate
{

typedef RotateRequest Request;
typedef RotateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Rotate
} // namespace serializer

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::serializer::RotateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "add030c9a3ec13fc469e071a948d4d33";
  }

  static const char* value(const  ::serializer::RotateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xadd030c9a3ec13fcULL;
  static const uint64_t static_value2 = 0x469e071a948d4d33ULL;
};

template<class ContainerAllocator>
struct DataType< ::serializer::RotateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serializer/RotateRequest";
  }

  static const char* value(const  ::serializer::RotateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::serializer::RotateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 angle\n\
float64 velocity\n\
\n\
";
  }

  static const char* value(const  ::serializer::RotateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::serializer::RotateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::serializer::RotateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::serializer::RotateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::serializer::RotateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serializer/RotateResponse";
  }

  static const char* value(const  ::serializer::RotateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::serializer::RotateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::serializer::RotateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::serializer::RotateResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::serializer::RotateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
    stream.next(m.velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RotateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::serializer::RotateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RotateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<serializer::Rotate> {
  static const char* value() 
  {
    return "add030c9a3ec13fc469e071a948d4d33";
  }

  static const char* value(const serializer::Rotate&) { return value(); } 
};

template<>
struct DataType<serializer::Rotate> {
  static const char* value() 
  {
    return "serializer/Rotate";
  }

  static const char* value(const serializer::Rotate&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<serializer::RotateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "add030c9a3ec13fc469e071a948d4d33";
  }

  static const char* value(const serializer::RotateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<serializer::RotateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serializer/Rotate";
  }

  static const char* value(const serializer::RotateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<serializer::RotateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "add030c9a3ec13fc469e071a948d4d33";
  }

  static const char* value(const serializer::RotateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<serializer::RotateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serializer/Rotate";
  }

  static const char* value(const serializer::RotateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SERIALIZER_SERVICE_ROTATE_H

